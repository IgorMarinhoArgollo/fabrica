{
  "openapi": "3.0.0",
  "info": {
    "title": "Desafio Fabrica",
    "description": "Esse projeto trada de uma API para um restaurante e foi desenvolvido em Node, Express em arquitetura MSC (Model-Service-Controller), utilizando o banco de dados MongoDB com o Mongoose. Além dessas ferramentas utilizou-se dotenv (trabalhar com variáveis de ambiente), rate-limit (proteger o servidor contra DDoS), helmet (suprimir informações potencialmente perigosas enviadas por padrão junto nas requisições), JWT(criação e validação de tokens de acesso), morgan (para realizar logs durante o desenvolvimento), swagger-UI (para gerar documentação).",
    "version": "1.0.0",
    "contact": {
      "email": "igormarinhoargollo@gmail.com"
    }
  },
  "server": {
    "url": "http://localhost:3001",
    "description": "Desafio Fábrica"
  },
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "Login endpoint that returns an JWT Bearer",
        "description": "This route is log the user in returning a bearer",
        "tags": [
          "login"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              },
              "example": {
                "email": "admin@admin.com",
                "password": "admin"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Invalid Field",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "login": {
                    "value": {
                      "message": "Invalid Field"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "login": {
                    "value": {
                      "message": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Logged In",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "login": {
                    "value": {
                      "token": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imxld2lzaGFtaWx0b25AZ21haWwuY29tIiwiaWF0IjoxNjYwNjU5OTk2LCJleHAiOjE2NjEyNjQ3OTZ9.t41pXd_yKnagrto6uQrpH4l3UAFwPt-uzyyU1K1vGqI"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/category": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all categories",
        "description": "This route is responsible for getting all categories on database - must be authorized",
        "tags": [
          "category"
        ],
        "responses": {
          "200": {
            "description": "All categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                },
                "example": [
                  {
                    "_id": "64336e91231e01fc70d86013",
                    "name": "entrada"
                  },
                  {
                    "_id": "64336e91231e01fc70d86016",
                    "name": "principal"
                  },
                  {
                    "_id": "64336e91231e01fc70d86019",
                    "name": "sobremesa"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "login": {
                    "value": {
                      "message": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get all products",
        "description": "This route is responsible for get all products.",
        "tags": [
          "product"
        ],
        "responses": {
          "200": {
            "description": "All products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                },
                "example": [
                  {
                    "_id": "64336e92231e01fc70d8601c",
                    "name": "pudim",
                    "quantity": 2,
                    "price": 10,
                    "category": [
                      "sobremesa"
                    ]
                  },
                  {
                    "_id": "64336e92231e01fc70d8601f",
                    "name": "fritas",
                    "quantity": 2,
                    "price": 10,
                    "category": [
                      "entrada",
                      "principal"
                    ]
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "login": {
                    "value": {
                      "message": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a new product",
        "description": "This route is responsible for creating a new product.",
        "tags": [
          "product"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "number"
                  },
                  "price": {
                    "type": "number"
                  },
                  "category": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "quantity",
                  "price",
                  "category"
                ]
              },
              "example": {
                "name": "arroz",
                "quantity": 3,
                "price": 15,
                "category": [
                  "principal"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Product created successfully"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Field - When it is missing some field, or any filed is not valid due to no fufill correct type or even when there is no listed category in the database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Invalid Field"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "login": {
                    "value": {
                      "message": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/product/{id}": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get product by Id",
        "description": "This route is responsible for getting a product by it's id",
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id to get",
            "required": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "Product found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Product"
                },
                "example": {
                  "_id": "64336e92231e01fc70d8601c",
                  "name": "pudim",
                  "quantity": 2,
                  "price": 10,
                  "category": [
                    "sobremesa"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "login": {
                    "value": {
                      "message": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update an existing product",
        "description": "This route is responsible for updating an existing product - although it is a patch i'm using it as a put, because i'm updating the whole product",
        "tags": [
          "product"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id to get",
            "required": "true"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "number"
                  },
                  "price": {
                    "type": "number"
                  },
                  "category": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "quantity",
                  "price",
                  "category"
                ]
              },
              "example": {
                "name": "arroz",
                "quantity": 3,
                "price": 15,
                "category": [
                  "principal"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "login": {
                    "value": {
                      "message": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Field - When it is missing some field, or any filed is not valid due to no fufill correct type or even when there is no listed category in the database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Invalid Field"
                }
              }
            }
          },
          "404": {
            "description": "Product not found to update",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Product not found"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete product based on it's Id",
        "description": "This route is responsible for deleting a product on database based on it's id",
        "tags": [
          "product"
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "login": {
                    "value": {
                      "message": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product not found to delete",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "message": "Product not found"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Category": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Product": {
        "type": "object",
        "required": [
          "name",
          "quantity",
          "price",
          "category"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "category": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}